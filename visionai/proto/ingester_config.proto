// Copyright 2022 Google LLC
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

syntax = "proto3";

package visionai;

import "google/protobuf/duration.proto";
import "visionai/proto/cluster_selection.proto";

option java_multiple_files = true;


// The IngesterConfig is the top level message for configuring the
// runtime behavior of the capture module.
message CaptureConfig {
  // The name of the specific source capture module.
  string name = 1;

  // The url of the input sources.
  repeated string source_urls = 2;

  // The attributes passed to the source capture module.
  map<string, string> attr = 3;
}

// The FilterConfig is the top level message for configuring the
// runtime behavior of the filter module.
message FilterConfig {
  // The name of the specific filter module.
  string name = 1;

  // The attributes passed to the filter module.
  map<string, string> attr = 2;
}

// The EventWriterConfig is the top level message for configuring the
// runtime behavior of the event writer.
message EventWriterConfig {
  // The name of the specific event writer.
  string name = 1;

  // The attributes passed to the event writer.
  map<string, string> attr = 2;

  // The GCP service and Anaheim cluster connection information.
  //
  // This specifies service connection information;
  // i.e. GCP project id, location id, Anaheim cluster id, etc.
  ClusterSelection cluster_selection = 3;

  // The grace period specifies how long the server will keep the event before
  // it's closed. During this period, the client can re-ingest to the same
  // event. If it's not set, zero duration is used which means the server will
  // close the event when the client disconnects from the server.
  google.protobuf.Duration grace_period = 4;
}

// The DepositorConfig is the top level message for configuring the
// runtime behavior of the depositor module.
message DepositorConfig {
  // The timeout that the depositor uses to poll its input buffer.
  int32 input_poll_timeout_ms = 1;
}

// The IngesterConfig is the top level message for configuring the
// runtime behavior of the Ingester.
message IngesterConfig {
  // An optional name of the ingester.
  //
  // If empty, then one will be autogenerated.
  string ingester_name = 1;

  // The IngestPolicy decides the ingestion policy.
  message IngestPolicy {
    // If true, operate in continuous mode, otherwise in sequential mode.
    //
    // In continuous mode, any event boundaries deduced by the filter will
    // be ignored and packets all sent to the same event-id.
    //
    // In sequential mode, data belong to separate events will be sent to
    // separate event-ids.
    bool continuous_mode = 1;

    // If empty, then event-ids and prefixes will be autogenerated.
    // When non-empty:
    // + Continuous mode: This will be the specific event-id to ingest into.
    // + Sequential mode: THis will be the event-id prefix to use.
    string event = 2;
  }
  // The specific ingest policy.
  IngestPolicy ingest_policy = 2;

  // The specific configuration for the capture module.
  CaptureConfig capture_config = 3;

  // The specific configuration for the filter module.
  FilterConfig filter_config = 4;

  // The specific configuration for the depositor module.
  DepositorConfig depositor_config = 5;

  // The specific configuration for the EventWriter.
  EventWriterConfig event_writer_config = 6;

  // Parameters contain parameter settings of the ingester's own resources
  // and hyperparameters.
  message Parameters {
    // The period that the main thread sleeps for in steady state.
    //
    // The unit is in milliseconds.
    //
    // Negative values will be overriden by an internal default.
    int32 sleep_period_ms = 1;

    // The output buffer capacity of the capture module.
    int32 capture_output_buffer_capacity = 2;

    // The finalization timeout of the capture worker.
    int32 capture_worker_finalize_timeout_ms = 3;

    // The output buffer capacity of the filter module.
    int32 filter_output_buffer_capacity = 4;

    // The finalization timeout of the filter worker.
    int32 filter_worker_finalize_timeout_ms = 5;

    // The finalization timeout of the depositor worker.
    int32 depositor_worker_finalize_timeout_ms = 6;
  }
  // The specific parameter settings.
  Parameters parameters = 7;
}
